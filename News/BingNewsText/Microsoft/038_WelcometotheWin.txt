{
    "authors": [],
    "date_download": "None",
    "date_modify": "None",
    "date_publish": "None",
    "description": "The new Windows Terminal and the original Windows console host, all in the same place! - microsoft/terminal",
    "filename": ".json",
    "image_url": "https://repository-images.githubusercontent.com/100060912/dc77b180-764a-11e9-9e12-aace7d0ecd7d",
    "language": "en",
    "localpath": null,
    "maintext": "This repository contains the source code for:\nWindows Terminal\nWindows Terminal Preview\nThe Windows console host (conhost.exe)\nComponents shared between the two projects\nColorTool\nSample projects that show how to consume the Windows Console APIs\nRelated repositories include:\nWindows Terminal Documentation (Repo: Contribute to the docs)\nConsole API Documentation\nCascadia Code Font\nInstall the Windows Terminal from the Microsoft Store. This allows you to always be on the latest version when we release new builds with automatic upgrades.\nThis is our preferred method.\nFor users who are unable to install Windows Terminal from the Microsoft Store, released builds can be manually downloaded from this repository's Releases page.\nDownload the Microsoft.WindowsTerminal_.msixbundle file from the Assets section. To install the app, you can simply double-click on the .msixbundle file, and the app installer should automatically run. If that fails for any reason, you can try the following command at a PowerShell prompt:\nwinget users can download and install the latest Terminal release by installing the Microsoft.WindowsTerminal package:\nChocolatey users can download and install the latest Terminal release by installing the microsoft-windows-terminal package:\nTo upgrade Windows Terminal using Chocolatey, run the following:\nIf you have any issues when installing/upgrading the package please go to the Windows Terminal package page and follow the Chocolatey triage process\nScoop users can download and install the latest Terminal release by installing the windows-terminal package:\nTo update Windows Terminal using Scoop, run the following:\nIf you have any issues when installing/updating the package, please search for or report the same on the issues page of Scoop Extras bucket repository.\nWindows Terminal Canary is a nightly build of Windows Terminal. This build has the latest code from our main branch, giving you an opportunity to try features before they make it to Windows Terminal Preview.\nWindows Terminal Canary is our least stable offering, so you may discover bugs before we have had a chance to find them.\nWindows Terminal Canary is available as an App Installer distribution and a Portable ZIP distribution.\nThe App Installer distribution supports automatic updates. Due to platform limitations, this installer only works on Windows 11.\nThe Portable ZIP distribution is a portable application. It will not automatically update and will not automatically check for updates. This portable ZIP distribution works on Windows 10 (19041+) and Windows 11.\nDistribution Architecture Link App Installer x64, arm64, x86 download Portable ZIP x64 download Portable ZIP ARM64 download Portable ZIP x86 download\nLearn more about the types of Windows Terminal distributions.\nThe plan for the Windows Terminal is described here and will be updated as the project proceeds.\nPlease take a few minutes to review the overview below before diving into the code:\nWindows Terminal is a new, modern, feature-rich, productive terminal application for command-line users. It includes many of the features most frequently requested by the Windows command-line community including support for tabs, rich text, globalization, configurability, theming & styling, and more.\nThe Terminal will also need to meet our goals and measures to ensure it remains fast and efficient, and doesn't consume vast amounts of memory or power.\nThe Windows Console host, conhost.exe, is Windows' original command-line user experience. It also hosts Windows' command-line infrastructure and the Windows Console API server, input engine, rendering engine, user preferences, etc. The console host code in this repository is the actual source from which the conhost.exe in Windows itself is built.\nSince taking ownership of the Windows command-line in 2014, the team added several new features to the Console, including background transparency, line-based selection, support for ANSI / Virtual Terminal sequences, 24-bit color, a Pseudoconsole (\"ConPTY\"), and more.\nHowever, because Windows Console's primary goal is to maintain backward compatibility, we have been unable to add many of the features the community (and the team) have been wanting for the last several years including tabs, unicode text, and emoji.\nThese limitations led us to create the new Windows Terminal.\nYou can read more about the evolution of the command-line in general, and the Windows command-line specifically in this accompanying series of blog posts on the Command-Line team's blog.\nWhile overhauling Windows Console, we modernized its codebase considerably, cleanly separating logical entities into modules and classes, introduced some key extensibility points, replaced several old, home-grown collections and containers with safer, more efficient STL containers, and made the code simpler and safer by using Microsoft's Windows Implementation Libraries - WIL.\nThis overhaul resulted in several of Console's key components being available for re-use in any terminal implementation on Windows. These components include a new DirectWrite-based text layout and rendering engine, a text buffer capable of storing both UTF-16 and UTF-8, a VT parser/emitter, and more.\nWhen we started planning the new Windows Terminal application, we explored and evaluated several approaches and technology stacks. We ultimately decided that our goals would be best met by continuing our investment in our C++ codebase, which would allow us to reuse several of the aforementioned modernized components in both the existing Console and the new Terminal. Further, we realized that this would allow us to build much of the Terminal's core itself as a reusable UI control that others can incorporate into their own applications.\nThe result of this work is contained within this repo and delivered as the Windows Terminal application you can download from the Microsoft Store, or directly from this repo's releases.\nFor more information about Windows Terminal, you may find some of these resources useful and interesting:\nCommand-Line Blog\nCommand-Line Backgrounder Blog Series\nWindows Terminal Launch: Terminal \"Sizzle Video\"\nWindows Terminal Launch: Build 2019 Session\nRun As Radio: Show 645 - Windows Terminal with Richard Turner\nAzure Devops Podcast: Episode 54 - Kayla Cinnamon and Rich Turner on DevOps on the Windows Terminal\nMicrosoft Ignite 2019 Session: The Modern Windows Command Line: Windows Terminal - BRK3321\nCause: You're launching the incorrect solution in Visual Studio.\nSolution: Make sure you're building & deploying the CascadiaPackage project in Visual Studio.\nAll project documentation is located at aka.ms/terminal-docs. If you would like to contribute to the documentation, please submit a pull request on the Windows Terminal Documentation repo.\nWe are excited to work alongside you, our amazing community, to build and enhance Windows Terminal!\nBEFORE you start work on a feature/fix, please read & follow our Contributor's Guide to help avoid any wasted or duplicate effort.\nThe easiest way to communicate with the team is via GitHub issues.\nPlease file new issues, feature requests and suggestions, but DO search for similar open/closed preexisting issues before creating a new issue.\nIf you would like to ask a question that you feel doesn't warrant an issue (yet), please reach out to us via Twitter:\nChristopher Nguyen, Product Manager: @nguyen_dows\nDustin Howett, Engineering Lead: @dhowett\nMike Griese, Senior Developer: @zadjii@mastodon.social\nCarlos Zamora, Developer: @cazamor_msft\nPankaj Bhojwani, Developer\nLeonard Hecker, Developer: @LeonardHecker\nYou must be running Windows 10 2004 (build >= 10.0.19041.0) or later to run Windows Terminal\nYou must enable Developer Mode in the Windows Settings app to locally install and run Windows Terminal\nYou must have PowerShell 7 or later installed\nYou must have the Windows 11 (10.0.22621.0) SDK installed\nYou must have at least VS 2022 installed\nYou must install the following Workloads via the VS Installer. Note: Opening the solution in VS 2022 will prompt you to install missing components automatically:\nDesktop Development with C++\nUniversal Windows Platform Development\nThe following Individual Components\nC++ (v143) Universal Windows Platform Tools\nYou must install the .NET Framework Targeting Pack to build test projects\nThis repository uses git submodules for some of its dependencies. To make sure submodules are restored or updated, be sure to run the following prior to building:\ngit submodule update --init --recursive\nOpenConsole.sln may be built from within Visual Studio or from the command-line using a set of convenience scripts & tools in the /tools directory:\nTo debug the Windows Terminal in VS, right click on CascadiaPackage (in the Solution Explorer) and go to properties. In the Debug menu, change \"Application process\" and \"Background task process\" to \"Native Only\".\nYou should then be able to build & debug the Terminal project by hitting F5. Make sure to select either the \"x64\" or the \"x86\" platform - the Terminal doesn't build for \"Any Cpu\" (because the Terminal is a C++ application, not a C# one).\n\ud83d\udc49 You will not be able to launch the Terminal directly by running the WindowsTerminal.exe. For more details on why, see #926, #4043\nPlease review these brief docs below about our coding practices.\n\ud83d\udc49 If you find something missing from these docs, feel free to contribute to any of our documentation files anywhere in the repository (or write some new ones!)\nThis is a work in progress as we learn what we'll need to provide people in order to be effective contributors to our project.\nCoding Style\nCode Organization\nExceptions in our legacy codebase\nHelpful smart pointers and macros for interfacing with Windows in WIL",
    "source_domain": null,
    "text": null,
    "title": "Windows Terminal",
    "title_page": null,
    "title_rss": null,
    "url": null
}