{
    "authors": [],
    "date_download": "None",
    "date_modify": "None",
    "date_publish": "None",
    "description": "Amazon Kinesis Client Library for Python. Contribute to awslabs/amazon-kinesis-client-python development by creating an account on GitHub.",
    "filename": ".json",
    "image_url": "https://opengraph.githubassets.com/a73d003028be8ba927b338fcf194f9f56bad453626e3f1299585b9146bcefbf4/awslabs/amazon-kinesis-client-python",
    "language": "en",
    "localpath": null,
    "maintext": "This package provides an interface to the Amazon Kinesis Client Library (KCL) MultiLangDaemon, which is part of the Amazon KCL for Java. Developers can use the Amazon KCL to build distributed applications that process streaming data reliably at scale. The Amazon KCL takes care of many of the complex tasks associated with distributed computing, such as load-balancing across multiple instances, responding to instance failures, checkpointing processed records, and reacting to changes in stream volume. This interface manages the interaction with the MultiLangDaemon so that developers can focus on implementing their record processor executable. A record processor executable typically looks something like:\nBefore running the samples, you'll want to make sure that your environment is configured to allow the samples to use your AWS Security Credentials.\nBy default the samples use the DefaultCredentialsProvider so you'll want to make your credentials available to one of the credentials providers in that provider chain. There are several ways to do this such as providing a ~/.aws/credentials file, or if you're running on EC2, you can associate an IAM role with your instance with appropriate access.\nFor questions regarding Amazon Kinesis Service and the client libraries please visit the Amazon Kinesis Forums\nUsing the amazon_kclpy package requires the MultiLangDaemon which is provided by the Amazon KCL for Java. These jars will be downloaded automatically by the install command, but you can explicitly download them with the download_jars command. From the root of this repo, run:\nNow the amazon_kclpy and boto (used by the sample putter script) and required jars should be installed in your environment. To start the sample putter, run:\nThis will create an Amazon Kinesis stream called words and put the words specified by the -w options into the stream once each. Use -p SECONDS to indicate a period over which to repeatedly put these words.\nNow we would like to run an Amazon KCL for Python application that reads records from the stream we just created, but first take a look in the samples directory, you'll find a file called sample.properties, cat that file:\nYou'll see several properties defined there. executableName indicates the executable for the MultiLangDaemon to run, streamName is the Kinesis stream to read from, appName is the Amazon KCL application name to use which will be the name of an Amazon DynamoDB table that gets created by the Amazon KCL, initialPositionInStream tells the Amazon KCL how to start reading from shards upon a fresh startup. To run the sample application you can use a helper script included in this package. Note you must provide a path to java (version 1.7 or greater) to run the Amazon KCL.\nThis will print the command needed to run the sample which you can copy paste, or surround the command with back ticks to run it.\nAlternatively, if you don't have the source on hand, but want to run the sample app you can use the --sample argument to indicate you'd like to get the sample.properties file from the installation location.\nRunning on EC2 is simple. Assuming you are already logged into an EC2 instance running Amazon Linux, the following steps will prepare your environment for running the sample app. Note the version of java that ships with Amazon Linux can be found at /usr/bin/java and should be 1.7 or greater.\nAmazon KCL for Python uses Amazon KCL for Java internally. We have implemented a Java-based daemon, called the MultiLangDaemon that does all the heavy lifting. Our approach has the daemon spawn the user-defined record processor script/program as a sub-process. The MultiLangDaemon communicates with this sub-process over standard input/output using a simple protocol, and therefore the record processor script/program can be written in any language.\nAt runtime, there will always be a one-to-one correspondence between a record processor, a child process, and an Amazon Kinesis Shard. The MultiLangDaemon will make sure of that, without any need for the developer to intervene.\nIn this release, we have abstracted these implementation details away and exposed an interface that enables you to focus on writing record processing logic in Python. This approach enables Amazon KCL to be language agnostic, while providing identical features and similar parallel processing model across all languages.\nDeveloping Consumer Applications for Amazon Kinesis Using the Amazon Kinesis Client Library\nThe Amazon KCL for Java\nThe Amazon KCL for Ruby\nThe Amazon Kinesis Documentation\nThe Amazon Kinesis Forum\nNew lease assignment / load balancing algorithm\nKCL 3.x introduces a new lease assignment and load balancing algorithm. It assigns leases among workers based on worker utilization metrics and throughput on each lease, replacing the previous lease count-based lease assignment algorithm.\nWhen KCL detects higher variance in CPU utilization among workers, it proactively reassigns leases from over-utilized workers to under-utilized workers for even load balancing. This ensures even CPU utilization across workers and removes the need to over-provision the stream processing compute hosts.\nOptimized DynamoDB RCU usage\nKCL 3.x optimizes DynamoDB read capacity unit (RCU) usage on the lease table by implementing a global secondary index with leaseOwner as the partition key. This index mirrors the leaseKey attribute from the base lease table, allowing workers to efficiently discover their assigned leases by querying the index instead of scanning the entire table.\nThis approach significantly reduces read operations compared to earlier KCL versions, where workers performed full table scans, resulting in higher RCU consumption.\nGraceful lease handoff\nKCL 3.x introduces a feature called \"graceful lease handoff\" to minimize data reprocessing during lease reassignments. Graceful lease handoff allows the current worker to complete checkpointing of processed records before transferring the lease to another worker. For graceful lease handoff, you should implement checkpointing logic within the existing shutdownRequested() method.\nThis feature is enabled by default in KCL 3.x, but you can turn off this feature by adjusting the configuration property isGracefulLeaseHandoffEnabled.\nWhile this approach significantly reduces the probability of data reprocessing during lease transfers, it doesn't completely eliminate the possibility. To maintain data integrity and consistency, it's crucial to design your downstream consumer applications to be idempotent. This ensures that the application can handle potential duplicate record processing without adverse effects.\nNew DynamoDB metadata management artifacts\nKCL 3.x introduces two new DynamoDB tables for improved lease management:\nWorker metrics table: Records CPU utilization metrics from each worker. KCL uses these metrics for optimal lease assignments, balancing resource utilization across workers. If CPU utilization metric is not available, KCL assigns leases to balance the total sum of shard throughput per worker instead.\nCoordinator state table: Stores internal state information for workers. Used to coordinate in-place migration from KCL 2.x to KCL 3.x and leader election among workers.\nFollow this documentation to add required IAM permissions for your KCL application.\nOther improvements and changes\nDependency on the AWS SDK for Java 1.x has been fully removed.\nThe Glue Schema Registry integration functionality no longer depends on AWS SDK for Java 1.x. Previously, it required this as a transient dependency.\nMultilangdaemon has been upgraded to use AWS SDK for Java 2.x. It no longer depends on AWS SDK for Java 1.x.\nidleTimeBetweenReadsInMillis (PollingConfig) now has a minimum default value of 200.\nThis polling configuration property determines the publishers wait time between GetRecords calls in both success and failure cases. Previously, setting this value below 200 caused unnecessary throttling. This is because Amazon Kinesis Data Streams supports up to five read transactions per second per shard for shared-throughput consumers.\nShard lifecycle management is improved to deal with edge cases around shard splits and merges to ensure records continue being processed as expected.\nMigration\nThe programming interfaces of KCL 3.x remain identical with KCL 2.x for an easier migration. For detailed migration instructions, please refer to the Migrate consumers from KCL 2.x to KCL 3.x page in the Amazon Kinesis Data Streams developer guide.\nConfiguration properties\nNew configuration properties introduced in KCL 3.x are listed in this doc.\nDeprecated configuration properties in KCL 3.x are listed in this doc. You need to keep the deprecated configuration properties during the migration from any previous KCL version to KCL 3.x.\nMetrics\nNew CloudWatch metrics introduced in KCL 3.x are explained in the Monitor the Kinesis Client Library with Amazon CloudWatch in the Amazon Kinesis Data Streams developer guide. The following operations are newly added in KCL 3.x:\nLeaseAssignmentManager\nWorkerMetricStatsReporter\nLeaseDiscovery\nWe found an issue with the release 3.0.0 regarding the build failure. Please use the release 3.0.1 to use KCL 3.0.\nFor 2.x and 1.x release notes, please see v2.x/README.md\nThis library is licensed under the Apache 2.0 License.",
    "source_domain": null,
    "text": null,
    "title": "Amazon Kinesis Client Library for Python",
    "title_page": null,
    "title_rss": null,
    "url": null
}