{
    "authors": [],
    "date_download": "None",
    "date_modify": "None",
    "date_publish": "None",
    "description": "mParticle Apple SDK. Contribute to mParticle/mparticle-apple-sdk development by creating an account on GitHub.",
    "filename": ".json",
    "image_url": "https://opengraph.githubassets.com/bc2337a58146cfed8f4608d30c41dd6b77b7be9bf04fdf064d2db47f560e5ddd/mParticle/mparticle-apple-sdk",
    "language": "en",
    "localpath": null,
    "maintext": "This is the mParticle Apple SDK for iOS and tvOS.\nAt mParticle our mission is straightforward: make it really easy for apps and app services to connect and allow you to take ownership of your 1st party data. Like most app owners, you end up implementing and maintaining numerous SDKs ranging from analytics, attribution, push notification, remarketing, monetization, etc. However, embedding multiple 3rd party libraries creates a number of unintended consequences and hidden costs.\nThe mParticle platform addresses all these problems. We support an ever growing number of integrations with services and SDKs, including developer tools, analytics, attribution, messaging, advertising, and more. mParticle has been designed to be the central hub connecting all these services \u2013 read the docs or contact us at support@mparticle.com to learn more.\nThis document will help you:\nInstall the mParticle SDK using CocoaPods or Carthage\nAdd any desired kits\nInitialize the mParticle SDK\nThe mParticle-Apple-SDK is available via CocoaPods, Carthage or Swift Package Manager. Follow the instructions below based on your preference.\nTo integrate the SDK using CocoaPods, specify it in your Podfile:\nConfiguring your Podfile with the statement above will include only the Core mParticle SDK.\nIf your app targets iOS and tvOS in the same Xcode project, you need to configure the Podfile differently in order to use the SDK with multiple platforms. You can find an example of multi-platform configuration here.\nIf you'd like to add any kits, you can do so as follows:\nIn the cases above, the Appboy, Branch Metrics, and Localytics kits would be integrated together with the core SDK.\nFor iOS only, you can also choose to install the crash reporter by including it as a separate pod:\nYou can read detailed instructions for including the Crash Reporter at its repository: mParticle-CrashReporter\nNote you can't use the crash reporter at the same time as the Apteligent kit.\nTo integrate the SDK using Carthage, specify it in your Cartfile:\nIf you'd like to add any kits, you can do so as follows:\nIn this case, only the Branch Metrics kit would be integrated; all other kits would be left out.\nTo integrate the SDK using Swift Package Manager, open your Xcode project and click on your project in the file list on the left, click on your Project name in the middle of the window, click on the \"Package Dependencies\" tab, and click the \"+\" button underneath the Packages list.\nEnter the repository URL https://github.com/mParticle/mparticle-apple-sdk in the search box on the top right, choose mparticle-apple-sdk from the list of pacakges, and change \"Dependency Rule\" to \"Up to Next Major Version\". Then click the \"Add Package\" button on the bottom right.\nThen choose either the \"Package Product\" called mParticle-Apple-SDK, or if you'd like to use a version of the SDK that doesn't include any location tracking nor links the CoreLocation framework choose mParticle-Apple-SDK-NoLocation.\nIMPORTANT: If you choose the mParticle-Apple-SDK-NoLocation package product, you will need to import the SDK using import mParticle_Apple_SDK_NoLocation instead of import mParticle_Apple_SDK as shown in the rest of the documentation and this README.\nSeveral integrations require additional client-side add-on libraries called \"kits.\" Some kits embed other SDKs, others just contain a bit of additional functionality. Kits are designed to feel just like server-side integrations; you enable, disable, filter, sample, and otherwise tweak kits completely from the mParticle platform UI. The Core SDK will detect kits at runtime, but you need to add them as dependencies to your app.\nKit CocoaPods Carthage Swift Package Manager Adjust \u2713 \u2713 \u2713 Appboy \u2713 \u2713 \u2713 Adobe \u2713 \u2713 AppsFlyer \u2713 \u2713 \u2713 Appsee \u2713 Apptentive \u2713 \u2713 Apptimize \u2713 Apteligent \u2713 Blueshift \u2713 Branch Metrics \u2713 \u2713 Button \u2713 \u2713 CleverTap \u2713 \u2713 comScore \u2713 Flurry \u2713 Google Analytics for Firebase \u2713 Instabot \u2713 Iterable \u2713 \u2713 Kahuna \u2713 Kochava \u2713 \u2713 Leanplum \u2713 \u2713 Localytics \u2713 \u2713 Optimizely \u2713 \u2713 OneTrust \u2713 \u2713 Pilgrim \u2713 \u2713 Primer \u2713 \u2713 Radar \u2713 \u2713 Responsys Reveal Mobile \u2713 Singular \u2713 Skyhook \u2713 Taplytics \u2713 Tune \u2713 \u2713 Urban Airship \u2713 UserLeap \u2713 \u2713 Wootric \u2713\nThe mParticle SDK is initialized by calling the startWithOptions method within the application:didFinishLaunchingWithOptions: delegate call. Preferably the location of the initialization method call should be one of the last statements in the application:didFinishLaunchingWithOptions:. The startWithOptions method requires an options argument containing your key and secret and an initial Identity request.\nNote that it is imperative for the SDK to be initialized in the application:didFinishLaunchingWithOptions: method. Other parts of the SDK rely on the UIApplicationDidBecomeActiveNotification notification to function properly. Failing to start the SDK as indicated will impair it. Also, please do not use GCD's dispatch_async to start the SDK.\nFor apps supporting iOS 8 and above, Apple recommends using the import syntax for modules or semantic import. However, if you prefer the traditional CocoaPods and static libraries delivery mechanism, that is fully supported as well.\nIf you are using mParticle as a framework, your import statement will be as follows:\nOtherwise, for CocoaPods without use_frameworks!, you can use either of these statements:\nNext, you'll need to start the SDK:\nPlease see Identity for more information on supplying an MPIdentityApiRequest object during SDK initialization.\nA sample project is provided with the mParticle Apple SDK. It is a multi-platform video streaming app for both iOS and tvOS.\nClone the repository to your local machine\ngit clone https://github.com/mParticle/mparticle-apple-sdk.git\nIn order to run either the iOS or tvOS examples, first install the mParticle Apple SDK via CocoaPods.\nChange to the Examples/CocoaPodsExample directory\nRun pod install\nOpen Example.xcworkspace in Xcode, select either the iOS_Example or tvOS_Example scheme, build and run.\nJust by initializing the SDK you'll be set up to track user installs, engagement, and much more. Check out our doc site to learn how to add specific event tracking to your app.\nSDK Documentation\nQuestions? Have an issue? Read the docs or contact our Customer Success team at support@mparticle.com.\nApache 2.0",
    "source_domain": null,
    "text": null,
    "title": "mParticle Apple SDK",
    "title_page": null,
    "title_rss": null,
    "url": null
}