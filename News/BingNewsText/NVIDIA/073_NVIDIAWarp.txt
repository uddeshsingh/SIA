{
    "authors": [],
    "date_download": "None",
    "date_modify": "None",
    "date_publish": "None",
    "description": "A Python framework for high performance GPU simulation and graphics - NVIDIA/warp",
    "filename": ".json",
    "image_url": "https://opengraph.githubassets.com/08e22bb7e6ee3e4a31f4a41223d0974d88de5cd0a7b609eed8cc2c31dd406d53/NVIDIA/warp",
    "language": "en",
    "localpath": null,
    "maintext": "Warp is a Python framework for writing high-performance simulation and graphics code. Warp takes regular Python functions and JIT compiles them to efficient kernel code that can run on the CPU or GPU.\nWarp is designed for spatial computing and comes with a rich set of primitives that make it easy to write programs for physics simulation, perception, robotics, and geometry processing. In addition, Warp kernels are differentiable and can be used as part of machine-learning pipelines with frameworks such as PyTorch, JAX and Paddle.\nPlease refer to the project Documentation for API and language reference and CHANGELOG.md for release history.\nPython version 3.9 or newer is recommended. Warp can run on x86-64 and ARMv8 CPUs on Windows, Linux, and macOS. GPU support requires a CUDA-capable NVIDIA GPU and driver (minimum GeForce GTX 9xx).\nThe easiest way to install Warp is from PyPI:\nYou can also use pip install warp-lang[extras] to install additional dependencies for running examples and USD-related features.\nThe binaries hosted on PyPI are currently built with the CUDA 12 runtime and therefore require a minimum version of the CUDA driver of 525.60.13 (Linux x86-64) or 528.33 (Windows x86-64).\nIf you require GPU support on a system with an older CUDA driver, you can build Warp from source or install wheels built with the CUDA 11.8 runtime from the GitHub Releases page. Copy the URL of the appropriate wheel file (warp-lang-{ver}+cu12-py3-none-{platform}.whl) and pass it to the pip install command, e.g.\nPlatform Install Command Linux aarch64 pip install https://github.com/NVIDIA/warp/releases/download/v1.4.2/warp_lang-1.4.2+cu11-py3-none-manylinux2014_aarch64.whl Linux x86-64 pip install https://github.com/NVIDIA/warp/releases/download/v1.4.2/warp_lang-1.4.2+cu11-py3-none-manylinux2014_x86_64.whl Windows x86-64 pip install https://github.com/NVIDIA/warp/releases/download/v1.4.2/warp_lang-1.4.2+cu11-py3-none-win_amd64.whl\nThe --force-reinstall option may need to be used to overwrite a previous installation.\nWarp packages built with CUDA Toolkit 11.x require NVIDIA driver 470 or newer.\nWarp packages built with CUDA Toolkit 12.x require NVIDIA driver 525 or newer.\nThis applies to pre-built packages distributed on PyPI and GitHub and also when building Warp from source.\nNote that building Warp with the --quick flag changes the driver requirements. The quick build skips CUDA backward compatibility, so the minimum required driver is determined by the CUDA Toolkit version. Refer to the latest CUDA Toolkit release notes to find the minimum required driver for different CUDA Toolkit versions (e.g., this table from CUDA Toolkit 12.6).\nWarp checks the installed driver during initialization and will report a warning if the driver is not suitable, e.g.:\nThis will make CUDA devices unavailable, but the CPU can still be used.\nTo remedy the situation there are a few options:\nUpdate the driver.\nInstall a compatible pre-built Warp package.\nBuild Warp from source using a CUDA Toolkit that's compatible with the installed driver.\nAn example first program that computes the lengths of random 3D vectors is given below:\nThe warp/examples directory contains a number of scripts categorized under subdirectories that show how to implement various simulation methods using the Warp API. Most examples will generate USD files containing time-sampled animations in the current working directory. Before running examples, users should ensure that the usd-core, matplotlib, and pyglet packages are installed using:\nThese dependencies can also be manually installed using:\nExamples can be run from the command-line as follows:\nTo browse the example source code, you can open the directory where the files are located like this:\nMost examples can be run on either the CPU or a CUDA-capable device, but a handful require a CUDA-capable device. These are marked at the top of the example script.\nUSD files can be viewed or rendered inside NVIDIA Omniverse, Pixar's UsdView, and Blender. Note that Preview in macOS is not recommended as it has limited support for time-sampled animations.\nBuilt-in unit tests can be run from the command-line as follows:\ndem fluid graph capture marching cubes mesh nvdb raycast raymarch sph torch wave\ndiffusion 3d mixed elasticity apic fluid streamlines convection diffusion navier stokes burgers magnetostatics\nbounce cloth throw diffray drone inverse kinematics spring cage trajectory walker\ncartpole cloth granular granular collision sdf jacobian ik quadruped rigid chain rigid contact rigid force rigid gyroscopic rigid soft contact soft body\nA few notebooks are available in the notebooks directory to provide an overview over the key features available in Warp.\nTo run these notebooks, jupyterlab is required to be installed using:\nFrom there, opening the notebooks can be done with the following command:\nWarp Core Tutorial: Basics\nWarp Core Tutorial: Generics\nWarp Core Tutorial: Points\nWarp Core Tutorial: Meshes\nWarp Core Tutorial: Volumes\nFor developers who want to build the library themselves, the following tools are required:\nMicrosoft Visual Studio 2019 upwards (Windows)\nGCC 9.4 upwards (Linux)\nCUDA Toolkit 11.5 or higher\nGit LFS installed\nAfter cloning the repository, users should run:\nUpon success, the script will output platform-specific binary files in warp/bin/. The build script will look for the CUDA Toolkit in its default installation path. This path can be overridden by setting the CUDA_PATH environment variable. Alternatively, the path to the CUDA Toolkit can be passed to the build command as --cuda_path=\"...\". After building, the Warp package should be installed using:\nThis ensures that subsequent modifications to the library will be reflected in the Python package.\nPlease see the following resources for additional background on Warp:\nProduct Page\nSIGGRAPH 2024 Course Slides\nGTC 2024 Presentation\nGTC 2022 Presentation\nGTC 2021 Presentation\nSIGGRAPH Asia 2021 Differentiable Simulation Course\nThe underlying technology in Warp has been used in a number of research projects at NVIDIA including the following publications:\nAccelerated Policy Learning with Parallel Differentiable Simulation - Xu, J., Makoviychuk, V., Narang, Y., Ramos, F., Matusik, W., Garg, A., & Macklin, M. (2022)\nDiSECt: Differentiable Simulator for Robotic Cutting - Heiden, E., Macklin, M., Narang, Y., Fox, D., Garg, A., & Ramos, F (2021)\ngradSim: Differentiable Simulation for System Identification and Visuomotor Control - Murthy, J. Krishna, Miles Macklin, Florian Golemo, Vikram Voleti, Linda Petrini, Martin Weiss, Breandan Considine et al. (2021)\nSee the FAQ in the Warp documentation.\nProblems, questions, and feature requests can be opened on GitHub Issues.\nThe Warp team also monitors the #warp forum on the public Omniverse Discord server, come chat with us!\nVersions take the format X.Y.Z, similar to Python itself:\nIncrements in X are reserved for major reworks of the project causing disruptive incompatibility (or reaching the 1.0 milestone).\nIncrements in Y are for regular releases with a new set of features.\nIncrements in Z are for bug fixes. In principle, there are no new features. Can be omitted if 0 or not relevant.\nThis is similar to Semantic Versioning but is less strict regarding backward compatibility. Like with Python, some breaking changes can be present between minor versions if well-documented and gradually introduced.\nNote that prior to 0.11.0, this schema was not strictly adhered to.\nWarp is provided under the NVIDIA Software License, please see LICENSE.md for full license text.\nContributions and pull requests from the community are welcome and are taken under the terms described in the Feedback section of LICENSE.md. Please see the Contribution Guide for more information on contributing to the development of Warp.\nIf you use Warp in your research, please use the following citation:",
    "source_domain": null,
    "text": null,
    "title": "NVIDIA/warp: A Python framework for high performance GPU simulation and graphics",
    "title_page": null,
    "title_rss": null,
    "url": null
}